BDEF

managed;
//guideline and best practice for definition to be followed
strict ( 2 );

//define the behavior for root entity
define behavior for ZATS_XX_TRAVEL alias Travel
//make the behavior pool/implemetation for travel
implementation in class zbp_ats_xx_travel unique
//telling the framework to insert data in this db table for travel request
persistent table /dmo/travel_m
//how the RAP should handle the locks - if a travel request is locked
//the other users cannot edit the childs - like its bookings and suppl
lock master
//controls the permissions and security settings for our RAP BO
authorization master ( instance )
//controlling the concurrency
etag master LastChangedAt
early numbering
{
  //here are the operations which RAP with generate automatically (manage)
  create;
  update;
  delete;
  //a booking can only be created with travel request
  //dynamic feature control
  association _Booking { create (features:instance); }

  //static feature control
  field (readonly) TravelId, CreatedBy, CreatedAt, LastChangedBy, LastChangedAt;
  field (mandatory) AgencyId, CustomerId, BeginDate, EndDate, OverallStatus, BookingFee, CurrencyCode;

  //data actions using factory action to create new instances of BO
  factory action copyTravel[1];

  mapping for /dmo/travel_m{
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    TotalPrice = total_price;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    Description = description;
    OverallStatus = overall_status;
    CreatedBy = created_by;
    LastChangedBy = last_changed_by;
    CreatedAt = created_at;
    LastChangedAt = last_changed_at;
  }
}

//define the behavior for child entity
define behavior for ZATS_XX_BOOKING alias Booking
//make the behavior pool/implemetation for booking
implementation in class zbp_ats_xx_booking unique
//telling the framework to insert data in this db table for booking
persistent table /dmo/booking_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId;
  field ( mandatory ) CarrierId, ConnectionId, FlightDate, BookingStatus;

  association _Travel;
  association _BookingSupplement { create; }

  mapping for /dmo/booking_m{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
    BookingStatus = booking_status;
    LastChangedAt = last_changed_at;
  }
}

//define the behavior for child entity
define behavior for ZATS_XX_BOOKSUPPL alias BookSuppl
//make the behavior pool/implemetation for travel
implementation in class zbp_ats_xx_boosuppl unique
//telling the framework to insert data in this db table for booking suppl
persistent table /dmo/booksuppl_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) BookingId, TravelId, BookingSupplementId;
  field ( mandatory ) Price, SupplementId;

  association _Travel;
  association _Booking;

  mapping for /dmo/booksuppl_m{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingSupplementId = booking_supplement_id;
    SupplementId = supplement_id;
    Price = price;
    CurrencyCode = currency_code;
    LastChangedAt = last_changed_at;
  }
}


3. BIMP

CLASS lhc_Travel DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.
    METHODS copytravel FOR MODIFY
      IMPORTING keys FOR ACTION travel~copytravel.
    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR travel RESULT result.
    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE travel.

    METHODS earlynumbering_cba_booking FOR NUMBERING
      IMPORTING entities FOR CREATE travel\_booking.

ENDCLASS.

CLASS lhc_Travel IMPLEMENTATION.

  METHOD get_instance_features.

    "Step 1: Read the travel data with status
    READ ENTITIES OF zats_xx_travel in local mode
        ENTITY travel
            FIELDS ( travelid overallstatus )
            with     CORRESPONDING #( keys )
        RESULT data(travels)
        FAILED failed.

    "Step 2: return the result with booking creation possible or not
    read table travels into data(ls_travel) index 1.

    if ( ls_travel-OverallStatus = 'X' ).
        data(lv_allow) = if_abap_behv=>fc-o-disabled.
    else.
        lv_allow = if_abap_behv=>fc-o-enabled.
    ENDIF.

    result = value #( for travel in travels
                        ( %tky = travel-%tky
                          %assoc-_Booking = lv_allow
                        )
                    ).

  ENDMETHOD.

ENDCLASS.
